/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreatePetsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * unexpected error
     */
    error?: components.ErrorT | undefined;
};

/** @internal */
export namespace CreatePetsResponse$ {
    export const inboundSchema: z.ZodType<CreatePetsResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Error: components.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Error === undefined ? null : { error: v.Error }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Error?: components.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePetsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            error: components.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.error === undefined ? null : { Error: v.error }),
            };
        });
}
