/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ListPetsRequest = {
    /**
     * How many items to return at one time (max 100)
     */
    limit?: number | undefined;
};

export type ListPetsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A paged array of pets
     */
    pets?: Array<components.Pet> | undefined;
    /**
     * unexpected error
     */
    error?: components.ErrorT | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace ListPetsRequest$ {
    export const inboundSchema: z.ZodType<ListPetsRequest, z.ZodTypeDef, unknown> = z.object({
        limit: z.number().int().optional(),
    });

    export type Outbound = {
        limit?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPetsRequest> = z.object({
        limit: z.number().int().optional(),
    });
}

/** @internal */
export namespace ListPetsResponse$ {
    export const inboundSchema: z.ZodType<ListPetsResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Pets: z.array(components.Pet$.inboundSchema).optional(),
            Error: components.ErrorT$.inboundSchema.optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Pets: "pets",
                Error: "error",
                Headers: "headers",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Pets?: Array<components.Pet$.Outbound> | undefined;
        Error?: components.ErrorT$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPetsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            pets: z.array(components.Pet$.outboundSchema).optional(),
            error: components.ErrorT$.outboundSchema.optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                pets: "Pets",
                error: "Error",
                headers: "Headers",
            });
        });
}
