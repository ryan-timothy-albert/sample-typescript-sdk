/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ListPetsRequest = {
    /**
     * How many items to return at one time (max 100)
     */
    limit?: number | undefined;
};

export type ListPetsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A paged array of pets
     */
    pets?: Array<components.Pet> | undefined;
    /**
     * unexpected error
     */
    error?: components.ErrorT | undefined;
    headers: Record<string, Array<string>>;
};

/** @internal */
export namespace ListPetsRequest$ {
    export type Inbound = {
        limit?: number | undefined;
    };

    export const inboundSchema: z.ZodType<ListPetsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            limit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.limit === undefined ? null : { limit: v.limit }),
            };
        });

    export type Outbound = {
        limit?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPetsRequest> = z
        .object({
            limit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.limit === undefined ? null : { limit: v.limit }),
            };
        });
}

/** @internal */
export namespace ListPetsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Pets?: Array<components.Pet$.Inbound> | undefined;
        Error?: components.ErrorT$.Inbound | undefined;
        Headers: Record<string, Array<string>>;
    };

    export const inboundSchema: z.ZodType<ListPetsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Pets: z.array(components.Pet$.inboundSchema).optional(),
            Error: components.ErrorT$.inboundSchema.optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Pets === undefined ? null : { pets: v.Pets }),
                ...(v.Error === undefined ? null : { error: v.Error }),
                headers: v.Headers,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Pets?: Array<components.Pet$.Outbound> | undefined;
        Error?: components.ErrorT$.Outbound | undefined;
        Headers: Record<string, Array<string>>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPetsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            pets: z.array(components.Pet$.outboundSchema).optional(),
            error: components.ErrorT$.outboundSchema.optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.pets === undefined ? null : { Pets: v.pets }),
                ...(v.error === undefined ? null : { Error: v.error }),
                Headers: v.headers,
            };
        });
}
